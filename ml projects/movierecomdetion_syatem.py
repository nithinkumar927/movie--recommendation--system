# -*- coding: utf-8 -*-
"""movierecomdetion syatem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZ5ACOKSidZ7mTAH7Ow9xxbZz0Bohdj5
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
import difflib
from sklearn.metrics.pairwise import cosine_similarity

A = pd.read_csv('/content/movies.csv', on_bad_lines='skip',)

A

A.shape

selected_features = ['genres','tagline','keywords','cast','director']
print(selected_features)

for features in selected_features:
  A[features] = A[features].fillna('')

combined_fetures = A['genres']+' '+A['tagline']+' '+A['keywords']+' '+A['cast']+' '+A['director']

print(combined_fetures)

Vectorizer = TfidfVectorizer()

feature_vectors = Vectorizer.fit_transform(combined_fetures)

similarity = cosine_similarity(feature_vectors)
print(similarity)

movie_name = input('enter movie name')

list_of_titles = A['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name,list_of_titles)

print(find_close_match)

close_match = find_close_match[0]
print(close_match)

index_of_movie = A[A.title == close_match]['index'].values[0]

print(index_of_movie)

similarity_score = list(enumerate(similarity[index_of_movie]))

print(similarity_score)

sorted_similer_movies = sorted(similarity_score,key=lambda x:x[1],reverse=True)

print(sorted_similer_movies)

print('movies suggested for you: \n')
i = 1
for movie_index, similarity_score in sorted_similer_movies:
  title_from_index = A[A.index == movie_index]['title'].values[0]
  if(i<20):
    print(i,'.',title_from_index)
    i += 1

import pickle

with open('movies_df.pkl', 'wb') as f:
    pickle.dump(A, f)

with open('similarity_matrix.pkl', 'wb') as f:
    pickle.dump(similarity, f)